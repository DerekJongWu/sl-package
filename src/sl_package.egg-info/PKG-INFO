Metadata-Version: 2.4
Name: sl_package
Version: 0.1.0
Summary: A game theory package with various solvers
Home-page: https://github.com/yourusername/sl-package
Author: Your Name
Author-email: Your Name <your.email@example.com>
Maintainer-email: Your Name <your.email@example.com>
License: MIT
Project-URL: Homepage, https://github.com/yourusername/sl-package
Project-URL: Repository, https://github.com/yourusername/sl-package
Project-URL: Bug Tracker, https://github.com/yourusername/sl-package/issues
Keywords: game-theory,nash-equilibrium,backward-induction,mixed-strategy
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Scientific/Engineering :: Mathematics
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy>=1.20.0
Requires-Dist: scipy>=1.7.0
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-cov>=2.0; extra == "dev"
Requires-Dist: black>=21.0; extra == "dev"
Requires-Dist: flake8>=3.8; extra == "dev"
Requires-Dist: mypy>=0.800; extra == "dev"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# SL Package

A Python package for game theory analysis with various solvers including Nash equilibrium, backward induction, and mixed strategy solvers.

## Installation

You can install the package using pip:

```bash
pip install sl-package
```

Or install from source:

```bash
git clone https://github.com/yourusername/sl-package.git
cd sl-package
pip install -e .
```

## Usage

```python
from sl_package import Game, Node, MixedStrategySolver, PureStrategyNashSolver, BackwardInductionSolver

# Create a game
game = Game()

# Use different solvers
mixed_solver = MixedStrategySolver()
pure_solver = PureStrategyNashSolver()
backward_solver = BackwardInductionSolver()

# Solve the game
solution = mixed_solver.solve(game)
```

## Features

- **Mixed Strategy Solver**: Find mixed strategy Nash equilibria
- **Pure Strategy Solver**: Find pure strategy Nash equilibria  
- **Backward Induction Solver**: Solve sequential games using backward induction
- **Game Representation**: Flexible game tree representation with Node class

## Development

To set up the development environment:

```bash
pip install -e ".[dev]"
```

Run tests:
```bash
pytest
```

Format code:
```bash
black src/
```

## License

This project is licensed under the MIT License - see the LICENSE file for details. 
